'use strict';

/**
 * [outliers]{@link https://github.com/MatthewMueller/outliers}
 *
 * @version 0.1.0
 * @author Matthew Mueller [mattmuelle@gmail.com]
 * @license MIT
 */


const isArray = Array.isArray;


/**
 * Initialize the outliers
 *
 * @param {array|String} [arr] - Input array (must not be provided when used as a filter).
 * @param {number} [g=1.5] - Threshold (defaults to 1.5).
 * @return {array|function} - If an array has been passed, returns outliers array; when used as a filter function.
 */
function outliers(arr, g=1.5) {
  if (isArray(arr)) return calc(arr, null,g);

  let o = null;
  const k = 'string' === typeof arr && arr;

  return function(v, i, a) {
    if (!o) o = calc(a, k, g);
    v = k ? v[k] : v;
    return !~o.indexOf(v);
  };
}


/**
 * Calculate the outliers
 *
 * @param {Array} arr - Input array.
 * @param {string} [key] - Optional key for objects.
 * @param {number} [g=1.5] - Threshold (defaults to 1.5).
 * @return {Array} - Outliers Array.
 */
function calc(arr, key, g=1.5) {
  if (key) arr = arr.map(v => v[key]);
  arr = arr.sort((a, b) => (a < b) ? -1 : ((a > b) ? 1 : 0));

  const middle = Number(median(arr));
  const range = Number(iqr(arr, g));

  return arr.filter(n => Math.abs(Number(n) - middle) > range);
}


/**
 * Find the median
 *
 * @param {Array} arr - Input Array.
 * @return {number} - Median of input array.
 */
function median(arr) {
  const half = arr.length >>> 1;

  return arr.length % 2
    ? arr[half]
    : (Number(arr[half - 1]) + Number(arr[half])) / 2;
}


/**
 * Find the range
 *
 * @param {Array} arr - Input Array.
 * @param {number} [g=1.5] - Threshold (defaults to 1.5).
 * @return {number} - The range from quartile 1 to quartile 3.
 */
function iqr(arr, g=1.5) {
  const half = arr.length >>> 1; 

  const q1 = median(arr.slice(0, half));
  const q3 = median(arr.slice(half+1));

  return (Number(q3) - Number(q1)) * g;
}

module.exports = outliers;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguY2pzIiwic291cmNlcyI6WyJpbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFtvdXRsaWVyc117QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL01hdHRoZXdNdWVsbGVyL291dGxpZXJzfVxuICpcbiAqIEB2ZXJzaW9uIDAuMS4wXG4gKiBAYXV0aG9yIE1hdHRoZXcgTXVlbGxlciBbbWF0dG11ZWxsZUBnbWFpbC5jb21dXG4gKiBAbGljZW5zZSBNSVRcbiAqL1xuXG5cbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgb3V0bGllcnNcbiAqXG4gKiBAcGFyYW0ge2FycmF5fFN0cmluZ30gW2Fycl0gLSBJbnB1dCBhcnJheSAobXVzdCBub3QgYmUgcHJvdmlkZWQgd2hlbiB1c2VkIGFzIGEgZmlsdGVyKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZz0xLjVdIC0gVGhyZXNob2xkIChkZWZhdWx0cyB0byAxLjUpLlxuICogQHJldHVybiB7YXJyYXl8ZnVuY3Rpb259IC0gSWYgYW4gYXJyYXkgaGFzIGJlZW4gcGFzc2VkLCByZXR1cm5zIG91dGxpZXJzIGFycmF5OyB3aGVuIHVzZWQgYXMgYSBmaWx0ZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG91dGxpZXJzKGFyciwgZz0xLjUpIHtcbiAgaWYgKGlzQXJyYXkoYXJyKSkgcmV0dXJuIGNhbGMoYXJyLCBudWxsLGcpO1xuXG4gIGxldCBvID0gbnVsbDtcbiAgY29uc3QgayA9ICdzdHJpbmcnID09PSB0eXBlb2YgYXJyICYmIGFycjtcblxuICByZXR1cm4gZnVuY3Rpb24odiwgaSwgYSkge1xuICAgIGlmICghbykgbyA9IGNhbGMoYSwgaywgZyk7XG4gICAgdiA9IGsgPyB2W2tdIDogdjtcbiAgICByZXR1cm4gIX5vLmluZGV4T2Yodik7XG4gIH07XG59XG5cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIG91dGxpZXJzXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyIC0gSW5wdXQgYXJyYXkuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gLSBPcHRpb25hbCBrZXkgZm9yIG9iamVjdHMuXG4gKiBAcGFyYW0ge251bWJlcn0gW2c9MS41XSAtIFRocmVzaG9sZCAoZGVmYXVsdHMgdG8gMS41KS5cbiAqIEByZXR1cm4ge0FycmF5fSAtIE91dGxpZXJzIEFycmF5LlxuICovXG5mdW5jdGlvbiBjYWxjKGFyciwga2V5LCBnPTEuNSkge1xuICBpZiAoa2V5KSBhcnIgPSBhcnIubWFwKHYgPT4gdltrZXldKTtcbiAgYXJyID0gYXJyLnNvcnQoKGEsIGIpID0+IChhIDwgYikgPyAtMSA6ICgoYSA+IGIpID8gMSA6IDApKTtcblxuICBjb25zdCBtaWRkbGUgPSBOdW1iZXIobWVkaWFuKGFycikpO1xuICBjb25zdCByYW5nZSA9IE51bWJlcihpcXIoYXJyLCBnKSk7XG5cbiAgcmV0dXJuIGFyci5maWx0ZXIobiA9PiBNYXRoLmFicyhOdW1iZXIobikgLSBtaWRkbGUpID4gcmFuZ2UpO1xufVxuXG5cbi8qKlxuICogRmluZCB0aGUgbWVkaWFuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyIC0gSW5wdXQgQXJyYXkuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IC0gTWVkaWFuIG9mIGlucHV0IGFycmF5LlxuICovXG5mdW5jdGlvbiBtZWRpYW4oYXJyKSB7XG4gIGNvbnN0IGhhbGYgPSBhcnIubGVuZ3RoID4+PiAxO1xuXG4gIHJldHVybiBhcnIubGVuZ3RoICUgMlxuICAgID8gYXJyW2hhbGZdXG4gICAgOiAoTnVtYmVyKGFycltoYWxmIC0gMV0pICsgTnVtYmVyKGFycltoYWxmXSkpIC8gMjtcbn1cblxuXG4vKipcbiAqIEZpbmQgdGhlIHJhbmdlXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyIC0gSW5wdXQgQXJyYXkuXG4gKiBAcGFyYW0ge251bWJlcn0gW2c9MS41XSAtIFRocmVzaG9sZCAoZGVmYXVsdHMgdG8gMS41KS5cbiAqIEByZXR1cm4ge251bWJlcn0gLSBUaGUgcmFuZ2UgZnJvbSBxdWFydGlsZSAxIHRvIHF1YXJ0aWxlIDMuXG4gKi9cbmZ1bmN0aW9uIGlxcihhcnIsIGc9MS41KSB7XG4gIGNvbnN0IGhhbGYgPSBhcnIubGVuZ3RoID4+PiAxOyBcblxuICBjb25zdCBxMSA9IG1lZGlhbihhcnIuc2xpY2UoMCwgaGFsZikpO1xuICBjb25zdCBxMyA9IG1lZGlhbihhcnIuc2xpY2UoaGFsZisxKSk7XG5cbiAgcmV0dXJuIChOdW1iZXIocTMpIC0gTnVtYmVyKHExKSkgKiBnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdXRsaWVycztcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7QUFDOUIsRUFBRSxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdDO0FBQ0EsRUFBRSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDZixFQUFFLE1BQU0sQ0FBQyxHQUFHLFFBQVEsS0FBSyxPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUM7QUFDM0M7QUFDQSxFQUFFLE9BQU8sU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUMzQixJQUFJLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBQzlCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3JCLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixHQUFHLENBQUM7QUFDSixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUU7QUFDL0IsRUFBRSxJQUFJLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdEMsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3RDtBQUNBLEVBQUUsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3JDLEVBQUUsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQztBQUNBLEVBQUUsT0FBTyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQztBQUMvRCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsTUFBTSxDQUFDLEdBQUcsRUFBRTtBQUNyQixFQUFFLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQ2hDO0FBQ0EsRUFBRSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQztBQUN2QixNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUM7QUFDZixNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsRUFBRTtBQUN6QixFQUFFLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO0FBQ2hDO0FBQ0EsRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUN4QyxFQUFFLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDO0FBQ0EsRUFBRSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkM7Ozs7In0=
